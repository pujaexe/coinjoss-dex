// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: izHjV9kAaSeWgz8SpCNdfG
// Component: l0SHF3rL5yFv
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import { NavigationBar } from "@plasmicpkgs/plasmic-nav"; // plasmic-import: jGx9tiKJoex/codeComponent
import Button from "../../Button"; // plasmic-import: QXv11hsUCwS/component

import { useScreenVariants as useScreenVariantsfXhB6HkIx2U } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: fXH_B-6hkIx2U/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_dex_joss.module.css"; // plasmic-import: izHjV9kAaSeWgz8SpCNdfG/projectcss
import sty from "./PlasmicHomepage.module.css"; // plasmic-import: l0SHF3rL5yFv/css

import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: G3K-SFjImLB/icon
import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: XgrqGPQlfCO/icon
import SecureSvgrepoComsvgIcon from "./icons/PlasmicIcon__SecureSvgrepoComsvg"; // plasmic-import: 6umLT7HaBM/icon
import BlockchainSvgrepoComsvgIcon from "./icons/PlasmicIcon__BlockchainSvgrepoComsvg"; // plasmic-import: Q6kFlcgGzV/icon
import AnonymousSvgrepoComsvgIcon from "./icons/PlasmicIcon__AnonymousSvgrepoComsvg"; // plasmic-import: HyaKV-ucS7/icon
import MultiLevelMarketingSvgrepoComsvgIcon from "./icons/PlasmicIcon__MultiLevelMarketingSvgrepoComsvg"; // plasmic-import: mrx_zfhkZ0/icon
import Icon3Icon from "./icons/PlasmicIcon__Icon3"; // plasmic-import: Sx4ac0Z9xZ/icon
import Icon4Icon from "./icons/PlasmicIcon__Icon4"; // plasmic-import: nix2_LE0eS/icon
import Icon5Icon from "./icons/PlasmicIcon__Icon5"; // plasmic-import: DXIbklCl4G/icon
import Icon6Icon from "./icons/PlasmicIcon__Icon6"; // plasmic-import: w7bMMt8klL/icon

export type PlasmicHomepage__VariantMembers = {};
export type PlasmicHomepage__VariantsArgs = {};
type VariantPropType = keyof PlasmicHomepage__VariantsArgs;
export const PlasmicHomepage__VariantProps = new Array<VariantPropType>();

export type PlasmicHomepage__ArgsType = {};
type ArgPropType = keyof PlasmicHomepage__ArgsType;
export const PlasmicHomepage__ArgProps = new Array<ArgPropType>();

export type PlasmicHomepage__OverridesType = {
  root?: p.Flex<"div">;
  header?: p.Flex<"div">;
  navigationBar?: p.Flex<typeof NavigationBar>;
  hero?: p.Flex<"section">;
  h5?: p.Flex<"h5">;
  feature?: p.Flex<"div">;
  feature5?: p.Flex<"div">;
  feature2?: p.Flex<"div">;
  feature3?: p.Flex<"div">;
};

export interface DefaultHomepageProps {}

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function PlasmicHomepage__RenderFunc(props: {
  variants: PlasmicHomepage__VariantsArgs;
  args: PlasmicHomepage__ArgsType;
  overrides: PlasmicHomepage__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const currentUser = p.useCurrentUser?.() || {};

  const [$queries, setDollarQueries] = React.useState({});

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsfXhB6HkIx2U()
  });

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            sty.root
          )}
        >
          <div
            data-plasmic-name={"header"}
            data-plasmic-override={overrides.header}
            className={classNames(projectcss.all, sty.header)}
          >
            <NavigationBar
              data-plasmic-name={"navigationBar"}
              data-plasmic-override={overrides.navigationBar}
              brand={
                true ? (
                  <p.PlasmicLink
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      sty.link__y5O6D
                    )}
                    component={Link}
                    href={"#" as const}
                    platform={"nextjs"}
                  >
                    <p.PlasmicImg
                      alt={""}
                      className={classNames(sty.img__uV4YK)}
                      displayHeight={"40px" as const}
                      displayMaxHeight={"none" as const}
                      displayMaxWidth={"none" as const}
                      displayMinHeight={"0" as const}
                      displayMinWidth={"0" as const}
                      displayWidth={"auto" as const}
                      src={{
                        src: "/plasmic/dex_joss/images/logoJoss1Svg.svg",
                        fullWidth: 300,
                        fullHeight: 93,
                        aspectRatio: 3.218045
                      }}
                    />
                  </p.PlasmicLink>
                ) : null
              }
              className={classNames("__wab_instance", sty.navigationBar)}
              closeButton={
                <p.PlasmicImg
                  alt={""}
                  className={classNames(sty.img__na5Y2)}
                  displayHeight={"auto" as const}
                  displayMaxHeight={"none" as const}
                  displayMaxWidth={"none" as const}
                  displayMinHeight={"0" as const}
                  displayMinWidth={"0" as const}
                  displayWidth={"auto" as const}
                  src={"https://static1.plasmic.app/close.svg" as const}
                />
              }
              itemsGap={24 as const}
              menuItems={
                <React.Fragment>
                  {true ? (
                    <p.PlasmicLink
                      className={classNames(
                        projectcss.all,
                        projectcss.a,
                        projectcss.__wab_text,
                        sty.link__avXdr
                      )}
                      component={Link}
                      href={"/" as const}
                      platform={"nextjs"}
                    >
                      {"Swap"}
                    </p.PlasmicLink>
                  ) : null}
                  {true ? (
                    <p.PlasmicLink
                      className={classNames(
                        projectcss.all,
                        projectcss.a,
                        projectcss.__wab_text,
                        sty.link__hren8
                      )}
                      component={Link}
                      href={"/" as const}
                      platform={"nextjs"}
                    >
                      {"Perpetual"}
                    </p.PlasmicLink>
                  ) : null}
                  {true ? (
                    <p.PlasmicLink
                      className={classNames(
                        projectcss.all,
                        projectcss.a,
                        projectcss.__wab_text,
                        sty.link__raNxd
                      )}
                      component={Link}
                      href={"/" as const}
                      platform={"nextjs"}
                    >
                      {"Liquidity"}
                    </p.PlasmicLink>
                  ) : null}
                  {true ? (
                    <p.PlasmicLink
                      className={classNames(
                        projectcss.all,
                        projectcss.a,
                        projectcss.__wab_text,
                        sty.link__oQwgV
                      )}
                      component={Link}
                      href={"/" as const}
                      platform={"nextjs"}
                    >
                      {"Staking"}
                    </p.PlasmicLink>
                  ) : null}
                  {true ? (
                    <p.PlasmicLink
                      className={classNames(
                        projectcss.all,
                        projectcss.a,
                        projectcss.__wab_text,
                        sty.link__kApFm
                      )}
                      component={Link}
                      href={"/" as const}
                      platform={"nextjs"}
                    >
                      {"OTC"}
                    </p.PlasmicLink>
                  ) : null}
                  {true ? (
                    <p.PlasmicLink
                      className={classNames(
                        projectcss.all,
                        projectcss.a,
                        projectcss.__wab_text,
                        sty.link__h1LdB
                      )}
                      component={Link}
                      href={"/" as const}
                      platform={"nextjs"}
                    >
                      {"Lending NFT"}
                    </p.PlasmicLink>
                  ) : null}
                  {true ? (
                    <p.PlasmicLink
                      className={classNames(
                        projectcss.all,
                        projectcss.a,
                        projectcss.__wab_text,
                        sty.link__eUu0F
                      )}
                      component={Link}
                      href={"/" as const}
                      platform={"nextjs"}
                    >
                      {"Governance"}
                    </p.PlasmicLink>
                  ) : null}
                  {true ? (
                    <p.PlasmicLink
                      className={classNames(
                        projectcss.all,
                        projectcss.a,
                        projectcss.__wab_text,
                        sty.link__eku3S
                      )}
                      component={Link}
                      href={"/" as const}
                      platform={"nextjs"}
                    >
                      {"Merchants"}
                    </p.PlasmicLink>
                  ) : null}
                  {true ? (
                    <p.PlasmicLink
                      className={classNames(
                        projectcss.all,
                        projectcss.a,
                        projectcss.__wab_text,
                        sty.link___7Fv0
                      )}
                      component={Link}
                      href={"/" as const}
                      platform={"nextjs"}
                    >
                      {"Lottery"}
                    </p.PlasmicLink>
                  ) : null}

                  <Button
                    className={classNames("__wab_instance", sty.button___4X889)}
                    color={"white" as const}
                  >
                    {"Connect Wallet"}
                  </Button>
                </React.Fragment>
              }
              openButton={
                <p.PlasmicImg
                  alt={""}
                  className={classNames(sty.img__rNmX1)}
                  displayHeight={"auto" as const}
                  displayMaxHeight={"none" as const}
                  displayMaxWidth={"none" as const}
                  displayMinHeight={"0" as const}
                  displayMinWidth={"0" as const}
                  displayWidth={"auto" as const}
                  src={"https://static1.plasmic.app/menu.svg" as const}
                />
              }
              responsiveBreakpoint={768 as const}
            />
          </div>

          <p.Stack
            as={"section"}
            data-plasmic-name={"hero"}
            data-plasmic-override={overrides.hero}
            hasGap={true}
            className={classNames(projectcss.all, sty.hero)}
          >
            {true ? (
              <div className={classNames(projectcss.all, sty.freeBox__b3Kn4)}>
                <h2
                  className={classNames(
                    projectcss.all,
                    projectcss.h2,
                    projectcss.__wab_text,
                    sty.h2__vmFvx
                  )}
                >
                  {"Decentralize Your Trading on Coinjoss"}
                </h2>

                <h5
                  data-plasmic-name={"h5"}
                  data-plasmic-override={overrides.h5}
                  className={classNames(
                    projectcss.all,
                    projectcss.h5,
                    projectcss.__wab_text,
                    sty.h5
                  )}
                >
                  {
                    "empowers users to take control of their financial future and engage with the world of cryptocurrency"
                  }
                </h5>

                <p.PlasmicLink
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    sty.link__htPcl
                  )}
                  component={Link}
                  href={"https://dex.coinjoss.com/swaps" as const}
                  platform={"nextjs"}
                >
                  <Button
                    className={classNames("__wab_instance", sty.button__u42S8)}
                    color={"white" as const}
                  >
                    {"Trade Now"}
                  </Button>
                </p.PlasmicLink>
              </div>
            ) : null}
          </p.Stack>

          <div
            data-plasmic-name={"feature"}
            data-plasmic-override={overrides.feature}
            className={classNames(projectcss.all, sty.feature)}
          >
            <h2
              className={classNames(
                projectcss.all,
                projectcss.h2,
                projectcss.__wab_text,
                sty.h2__dvQtt
              )}
            >
              {"Our Service"}
            </h2>

            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__ccKuq)}
            >
              <div className={classNames(projectcss.all, sty.freeBox___38QAb)}>
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.columns__n1V7P)}
                >
                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.column___7LdXv)}
                  >
                    <p.PlasmicImg
                      alt={""}
                      className={classNames(sty.img__hERvN)}
                      displayHeight={"auto" as const}
                      displayMaxHeight={"none" as const}
                      displayMaxWidth={"100%" as const}
                      displayMinHeight={"0" as const}
                      displayMinWidth={"0" as const}
                      displayWidth={"200px" as const}
                      loading={"lazy" as const}
                      src={{
                        src: "/plasmic/dex_joss/images/image2.png",
                        fullWidth: 1024,
                        fullHeight: 1024,
                        aspectRatio: undefined
                      }}
                    />

                    <h4
                      className={classNames(
                        projectcss.all,
                        projectcss.h4,
                        projectcss.__wab_text,
                        sty.h4___9Lg6L
                      )}
                    >
                      {"Swap"}
                    </h4>

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__zmJ2F
                      )}
                    >
                      {
                        "Swap instantly and securely. Decentralized, transparent, and tamper-proof trading"
                      }
                    </div>
                  </p.Stack>

                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.column__i8WHs)}
                  >
                    <p.PlasmicImg
                      alt={""}
                      className={classNames(sty.img__g0Kl)}
                      displayHeight={"auto" as const}
                      displayMaxHeight={"none" as const}
                      displayMaxWidth={"100%" as const}
                      displayMinHeight={"0" as const}
                      displayMinWidth={"0" as const}
                      displayWidth={"200px" as const}
                      loading={"lazy" as const}
                      src={{
                        src: "/plasmic/dex_joss/images/image3.png",
                        fullWidth: 1024,
                        fullHeight: 1024,
                        aspectRatio: undefined
                      }}
                    />

                    <h4
                      className={classNames(
                        projectcss.all,
                        projectcss.h4,
                        projectcss.__wab_text,
                        sty.h4__t1R
                      )}
                    >
                      {"Liquidity"}
                    </h4>

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__wUcfk
                      )}
                    >
                      {
                        "Boost your earning potential white Stake your coins and earn rewards on our DEX platform. "
                      }
                    </div>
                  </p.Stack>

                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.column__nerkR)}
                  >
                    <p.PlasmicImg
                      alt={""}
                      className={classNames(sty.img__hRkru)}
                      displayHeight={"auto" as const}
                      displayMaxHeight={"none" as const}
                      displayMaxWidth={"100%" as const}
                      displayMinHeight={"0" as const}
                      displayMinWidth={"0" as const}
                      displayWidth={"200px" as const}
                      loading={"lazy" as const}
                      src={{
                        src: "/plasmic/dex_joss/images/image4.png",
                        fullWidth: 1024,
                        fullHeight: 1024,
                        aspectRatio: undefined
                      }}
                    />

                    <h4
                      className={classNames(
                        projectcss.all,
                        projectcss.h4,
                        projectcss.__wab_text,
                        sty.h4__gWEs
                      )}
                    >
                      {"Lending NFT"}
                    </h4>

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__vx0Fe
                      )}
                    >
                      {
                        "Collaborate and contribute to the future of decentralized finance. "
                      }
                    </div>
                  </p.Stack>
                </p.Stack>
              </div>

              <div className={classNames(projectcss.all, sty.freeBox__eLisT)}>
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.columns__tthJh)}
                >
                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.column___4F0Pr)}
                  >
                    <p.PlasmicImg
                      alt={""}
                      className={classNames(sty.img__o9AVd)}
                      displayHeight={"auto" as const}
                      displayMaxHeight={"none" as const}
                      displayMaxWidth={"100%" as const}
                      displayMinHeight={"0" as const}
                      displayMinWidth={"0" as const}
                      displayWidth={"200px" as const}
                      loading={"lazy" as const}
                      src={{
                        src: "/plasmic/dex_joss/images/image5.png",
                        fullWidth: 1024,
                        fullHeight: 1024,
                        aspectRatio: undefined
                      }}
                    />

                    <h4
                      className={classNames(
                        projectcss.all,
                        projectcss.h4,
                        projectcss.__wab_text,
                        sty.h4__fAjTc
                      )}
                    >
                      {"Staking"}
                    </h4>

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__jXHec
                      )}
                    >
                      {
                        "Boost your earning potential white Stake your coins and earn rewards on our DEX platform. "
                      }
                    </div>
                  </p.Stack>

                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.column___2N9Yz)}
                  >
                    <p.PlasmicImg
                      alt={""}
                      className={classNames(sty.img__lgCy0)}
                      displayHeight={"auto" as const}
                      displayMaxHeight={"none" as const}
                      displayMaxWidth={"100%" as const}
                      displayMinHeight={"0" as const}
                      displayMinWidth={"0" as const}
                      displayWidth={"200px" as const}
                      loading={"lazy" as const}
                      src={{
                        src: "/plasmic/dex_joss/images/image6.png",
                        fullWidth: 1024,
                        fullHeight: 1024,
                        aspectRatio: undefined
                      }}
                    />

                    <h4
                      className={classNames(
                        projectcss.all,
                        projectcss.h4,
                        projectcss.__wab_text,
                        sty.h4___3M7Cr
                      )}
                    >
                      {"Governance"}
                    </h4>

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__l1P2R
                      )}
                    >
                      {
                        "Create a decentralized, transparent, and fair decision-making process that ensures the long-term success of the platform."
                      }
                    </div>
                  </p.Stack>

                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.column__sVp3J)}
                  >
                    <p.PlasmicImg
                      alt={""}
                      className={classNames(sty.img__go1Yd)}
                      displayHeight={"auto" as const}
                      displayMaxHeight={"none" as const}
                      displayMaxWidth={"100%" as const}
                      displayMinHeight={"0" as const}
                      displayMinWidth={"0" as const}
                      displayWidth={"200px" as const}
                      loading={"lazy" as const}
                      src={{
                        src: "/plasmic/dex_joss/images/image7.png",
                        fullWidth: 1024,
                        fullHeight: 1024,
                        aspectRatio: undefined
                      }}
                    />

                    <h4
                      className={classNames(
                        projectcss.all,
                        projectcss.h4,
                        projectcss.__wab_text,
                        sty.h4__eOw
                      )}
                    >
                      {"OTC"}
                    </h4>

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__eeHjJ
                      )}
                    >
                      {"Peer to Peer service to trade your assets"}
                    </div>
                  </p.Stack>
                </p.Stack>
              </div>

              <div className={classNames(projectcss.all, sty.freeBox__tFk9)}>
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.columns__kzZex)}
                >
                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.column__iHNsU)}
                  >
                    <p.PlasmicImg
                      alt={""}
                      className={classNames(sty.img___52ZLo)}
                      displayHeight={"auto" as const}
                      displayMaxHeight={"none" as const}
                      displayMaxWidth={"100%" as const}
                      displayMinHeight={"0" as const}
                      displayMinWidth={"0" as const}
                      displayWidth={"200px" as const}
                      loading={"lazy" as const}
                      src={{
                        src: "/plasmic/dex_joss/images/image8.png",
                        fullWidth: 1024,
                        fullHeight: 1024,
                        aspectRatio: undefined
                      }}
                    />

                    <h4
                      className={classNames(
                        projectcss.all,
                        projectcss.h4,
                        projectcss.__wab_text,
                        sty.h4__iM5Vg
                      )}
                    >
                      {"Merchants"}
                    </h4>

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__n6YrC
                      )}
                    >
                      {
                        "service providers scattered in several areas to help your transaction"
                      }
                    </div>
                  </p.Stack>

                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.column__dOb0B)}
                  >
                    <p.PlasmicImg
                      alt={""}
                      className={classNames(sty.img__qwWeo)}
                      displayHeight={"auto" as const}
                      displayMaxHeight={"none" as const}
                      displayMaxWidth={"100%" as const}
                      displayMinHeight={"0" as const}
                      displayMinWidth={"0" as const}
                      displayWidth={"200px" as const}
                      loading={"lazy" as const}
                      src={{
                        src: "/plasmic/dex_joss/images/image9.png",
                        fullWidth: 1024,
                        fullHeight: 1024,
                        aspectRatio: undefined
                      }}
                    />

                    <h4
                      className={classNames(
                        projectcss.all,
                        projectcss.h4,
                        projectcss.__wab_text,
                        sty.h4___3P1D
                      )}
                    >
                      {"Lottery"}
                    </h4>

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__etoSd
                      )}
                    >
                      {
                        "Win prizes while ensuring your initial investment is returned, making it a safe and secure way to play the lottery."
                      }
                    </div>
                  </p.Stack>

                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.column__x5Sea)}
                  >
                    <p.PlasmicImg
                      alt={""}
                      className={classNames(sty.img__aVgo7)}
                      displayHeight={"auto" as const}
                      displayMaxHeight={"none" as const}
                      displayMaxWidth={"100%" as const}
                      displayMinHeight={"0" as const}
                      displayMinWidth={"0" as const}
                      displayWidth={"200px" as const}
                      loading={"lazy" as const}
                      src={{
                        src: "/plasmic/dex_joss/images/image10.png",
                        fullWidth: 1024,
                        fullHeight: 1024,
                        aspectRatio: undefined
                      }}
                    />

                    <h4
                      className={classNames(
                        projectcss.all,
                        projectcss.h4,
                        projectcss.__wab_text,
                        sty.h4__klwCp
                      )}
                    >
                      {"Perpetual"}
                    </h4>

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___4Oaf0
                      )}
                    >
                      {
                        "a decentralized exchange platform for trading futures contracts with cryptocurrencies"
                      }
                    </div>
                  </p.Stack>
                </p.Stack>
              </div>
            </p.Stack>
          </div>

          <div
            data-plasmic-name={"feature5"}
            data-plasmic-override={overrides.feature5}
            className={classNames(projectcss.all, sty.feature5)}
          >
            <h2
              className={classNames(
                projectcss.all,
                projectcss.h2,
                projectcss.__wab_text,
                sty.h2__wIJtG
              )}
            >
              {"What advantages do we offer over others?"}
            </h2>

            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__umBlP)}
            >
              <div className={classNames(projectcss.all, sty.columns___1SKnD)}>
                <div className={classNames(projectcss.all, sty.column__b566H)}>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__eqT0
                    )}
                  >
                    {
                      "Powered by blockchain technology enables direct transactions between users, without relying on a centralized authority. Maintain full control over your funds"
                    }
                  </div>
                </div>

                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.column___2P4F)}
                >
                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.columns__d2KvK)}
                  >
                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.column__l6HTx)}
                    >
                      <SecureSvgrepoComsvgIcon
                        className={classNames(projectcss.all, sty.svg__msxPt)}
                        role={"img"}
                      />

                      <h4
                        className={classNames(
                          projectcss.all,
                          projectcss.h4,
                          projectcss.__wab_text,
                          sty.h4__x6Hz7
                        )}
                      >
                        {"Secure"}
                      </h4>

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__bieSp
                        )}
                      >
                        {"Full control over your funds and private keys"}
                      </div>
                    </p.Stack>

                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.column__h8TiL)}
                    >
                      <BlockchainSvgrepoComsvgIcon
                        className={classNames(projectcss.all, sty.svg__gZttQ)}
                        role={"img"}
                      />

                      <h4
                        className={classNames(
                          projectcss.all,
                          projectcss.h4,
                          projectcss.__wab_text,
                          sty.h4__ujvMr
                        )}
                      >
                        {"Decentralize"}
                      </h4>

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__nr4B
                        )}
                      >
                        {
                          "Processed by the network, more secure and transparent."
                        }
                      </div>
                    </p.Stack>
                  </p.Stack>

                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.columns__y8270)}
                  >
                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.column__wAa2A)}
                    >
                      <AnonymousSvgrepoComsvgIcon
                        className={classNames(projectcss.all, sty.svg__nnvUk)}
                        role={"img"}
                      />

                      <h4
                        className={classNames(
                          projectcss.all,
                          projectcss.h4,
                          projectcss.__wab_text,
                          sty.h4__wyMTg
                        )}
                      >
                        {"Anonymous"}
                      </h4>

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___6FmWz
                        )}
                      >
                        {"keep your identity  private and protected"}
                      </div>
                    </p.Stack>

                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.column__jEygR)}
                    >
                      <MultiLevelMarketingSvgrepoComsvgIcon
                        className={classNames(projectcss.all, sty.svg__gpX3U)}
                        role={"img"}
                      />

                      <h4
                        className={classNames(
                          projectcss.all,
                          projectcss.h4,
                          projectcss.__wab_text,
                          sty.h4__tfFFi
                        )}
                      >
                        {"Agnostic"}
                      </h4>

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__pnTs
                        )}
                      >
                        {
                          "supports multiple blockchain networks, enabling diverse trading"
                        }
                      </div>
                    </p.Stack>
                  </p.Stack>
                </p.Stack>
              </div>
            </p.Stack>
          </div>

          <div
            data-plasmic-name={"feature2"}
            data-plasmic-override={overrides.feature2}
            className={classNames(projectcss.all, sty.feature2)}
          >
            <h2
              className={classNames(
                projectcss.all,
                projectcss.h2,
                projectcss.__wab_text,
                sty.h2__cfUIn
              )}
            >
              {"Roadmap"}
            </h2>

            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__nuUyK)}
            >
              <p.PlasmicImg
                alt={""}
                className={classNames(sty.img__hEiv)}
                displayHeight={"auto" as const}
                displayMaxHeight={"none" as const}
                displayMaxWidth={"100%" as const}
                displayMinHeight={"0" as const}
                displayMinWidth={"0" as const}
                displayWidth={"auto" as const}
                loading={"lazy" as const}
                src={{
                  src: "/plasmic/dex_joss/images/roadmappng.png",
                  fullWidth: 320,
                  fullHeight: 477,
                  aspectRatio: undefined
                }}
              />
            </p.Stack>
          </div>

          <p.Stack
            as={"div"}
            data-plasmic-name={"feature3"}
            data-plasmic-override={overrides.feature3}
            hasGap={true}
            className={classNames(projectcss.all, sty.feature3)}
          >
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__fvt6Z)}
            >
              <Icon3Icon
                className={classNames(projectcss.all, sty.svg__qDbM)}
                role={"img"}
              />

              <Icon4Icon
                className={classNames(projectcss.all, sty.svg__xzq0W)}
                role={"img"}
              />

              <Icon5Icon
                className={classNames(projectcss.all, sty.svg__n7Vhl)}
                role={"img"}
              />

              <Icon6Icon
                className={classNames(projectcss.all, sty.svg__zvnEj)}
                role={"img"}
              />
            </p.Stack>

            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__eddy3
              )}
            >
              {"© 2023 · Coinjoss.com"}
            </div>
          </p.Stack>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "header",
    "navigationBar",
    "hero",
    "h5",
    "feature",
    "feature5",
    "feature2",
    "feature3"
  ],
  header: ["header", "navigationBar"],
  navigationBar: ["navigationBar"],
  hero: ["hero", "h5"],
  h5: ["h5"],
  feature: ["feature"],
  feature5: ["feature5"],
  feature2: ["feature2"],
  feature3: ["feature3"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  header: "div";
  navigationBar: typeof NavigationBar;
  hero: "section";
  h5: "h5";
  feature: "div";
  feature5: "div";
  feature2: "div";
  feature3: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHomepage__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHomepage__VariantsArgs;
    args?: PlasmicHomepage__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicHomepage__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicHomepage__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicHomepage__ArgProps,
          internalVariantPropNames: PlasmicHomepage__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicHomepage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHomepage";
  } else {
    func.displayName = `PlasmicHomepage.${nodeName}`;
  }
  return func;
}

export const PlasmicHomepage = Object.assign(
  // Top-level PlasmicHomepage renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    header: makeNodeComponent("header"),
    navigationBar: makeNodeComponent("navigationBar"),
    hero: makeNodeComponent("hero"),
    h5: makeNodeComponent("h5"),
    feature: makeNodeComponent("feature"),
    feature5: makeNodeComponent("feature5"),
    feature2: makeNodeComponent("feature2"),
    feature3: makeNodeComponent("feature3"),

    // Metadata about props expected for PlasmicHomepage
    internalVariantProps: PlasmicHomepage__VariantProps,
    internalArgProps: PlasmicHomepage__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicHomepage;
/* prettier-ignore-end */
