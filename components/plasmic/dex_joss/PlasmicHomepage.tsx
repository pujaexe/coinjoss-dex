// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: izHjV9kAaSeWgz8SpCNdfG
// Component: l0SHF3rL5yFv
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import { NavigationBar } from "@plasmicpkgs/plasmic-nav"; // plasmic-import: jGx9tiKJoex/codeComponent
import Button from "../../Button"; // plasmic-import: QXv11hsUCwS/component

import { useScreenVariants as useScreenVariantsfXhB6HkIx2U } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: fXH_B-6hkIx2U/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_dex_joss.module.css"; // plasmic-import: izHjV9kAaSeWgz8SpCNdfG/projectcss
import sty from "./PlasmicHomepage.module.css"; // plasmic-import: l0SHF3rL5yFv/css

import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: G3K-SFjImLB/icon
import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: XgrqGPQlfCO/icon
import Icon2Icon from "./icons/PlasmicIcon__Icon2"; // plasmic-import: WIM4ywG8jC/icon
import MoneyRocketSvgrepoComsvgIcon from "./icons/PlasmicIcon__MoneyRocketSvgrepoComsvg"; // plasmic-import: DL09SAee60/icon
import SwarmSessionSvgrepoComsvgIcon from "./icons/PlasmicIcon__SwarmSessionSvgrepoComsvg"; // plasmic-import: pi7JdATBjc/icon
import SecureSvgrepoComsvgIcon from "./icons/PlasmicIcon__SecureSvgrepoComsvg"; // plasmic-import: 6umLT7HaBM/icon
import BlockchainSvgrepoComsvgIcon from "./icons/PlasmicIcon__BlockchainSvgrepoComsvg"; // plasmic-import: Q6kFlcgGzV/icon
import AnonymousSvgrepoComsvgIcon from "./icons/PlasmicIcon__AnonymousSvgrepoComsvg"; // plasmic-import: HyaKV-ucS7/icon
import MultiLevelMarketingSvgrepoComsvgIcon from "./icons/PlasmicIcon__MultiLevelMarketingSvgrepoComsvg"; // plasmic-import: mrx_zfhkZ0/icon

export type PlasmicHomepage__VariantMembers = {};
export type PlasmicHomepage__VariantsArgs = {};
type VariantPropType = keyof PlasmicHomepage__VariantsArgs;
export const PlasmicHomepage__VariantProps = new Array<VariantPropType>();

export type PlasmicHomepage__ArgsType = {};
type ArgPropType = keyof PlasmicHomepage__ArgsType;
export const PlasmicHomepage__ArgProps = new Array<ArgPropType>();

export type PlasmicHomepage__OverridesType = {
  root?: p.Flex<"div">;
  header?: p.Flex<"div">;
  navigationBar?: p.Flex<typeof NavigationBar>;
  img?: p.Flex<typeof p.PlasmicImg>;
  hero?: p.Flex<"section">;
  h2?: p.Flex<"h2">;
  h5?: p.Flex<"h5">;
  button?: p.Flex<typeof Button>;
  feature?: p.Flex<"div">;
  feature2?: p.Flex<"div">;
  feature3?: p.Flex<"div">;
  feature4?: p.Flex<"div">;
};

export interface DefaultHomepageProps {}

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function PlasmicHomepage__RenderFunc(props: {
  variants: PlasmicHomepage__VariantsArgs;
  args: PlasmicHomepage__ArgsType;
  overrides: PlasmicHomepage__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const currentUser = p.useCurrentUser?.() || {};

  const [$queries, setDollarQueries] = React.useState({});

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsfXhB6HkIx2U()
  });

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            sty.root
          )}
        >
          <div
            data-plasmic-name={"header"}
            data-plasmic-override={overrides.header}
            className={classNames(projectcss.all, sty.header)}
          >
            <NavigationBar
              data-plasmic-name={"navigationBar"}
              data-plasmic-override={overrides.navigationBar}
              brand={
                true ? (
                  <p.PlasmicLink
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      sty.link__y5O6D
                    )}
                    component={Link}
                    href={"#" as const}
                    platform={"nextjs"}
                  >
                    <p.PlasmicImg
                      data-plasmic-name={"img"}
                      data-plasmic-override={overrides.img}
                      alt={""}
                      className={classNames(sty.img)}
                      displayHeight={"40px" as const}
                      displayMaxHeight={"none" as const}
                      displayMaxWidth={"none" as const}
                      displayMinHeight={"0" as const}
                      displayMinWidth={"0" as const}
                      displayWidth={"auto" as const}
                      src={
                        "https://static1.plasmic.app/nav-logo-placeholder.svg" as const
                      }
                    />
                  </p.PlasmicLink>
                ) : null
              }
              className={classNames("__wab_instance", sty.navigationBar)}
              closeButton={
                <p.PlasmicImg
                  alt={""}
                  className={classNames(sty.img__na5Y2)}
                  displayHeight={"auto" as const}
                  displayMaxHeight={"none" as const}
                  displayMaxWidth={"none" as const}
                  displayMinHeight={"0" as const}
                  displayMinWidth={"0" as const}
                  displayWidth={"auto" as const}
                  src={"https://static1.plasmic.app/close.svg" as const}
                />
              }
              itemsGap={24 as const}
              menuItems={
                <React.Fragment>
                  {true ? (
                    <p.PlasmicLink
                      className={classNames(
                        projectcss.all,
                        projectcss.a,
                        projectcss.__wab_text,
                        sty.link__avXdr
                      )}
                      component={Link}
                      href={"/" as const}
                      platform={"nextjs"}
                    >
                      {"Home"}
                    </p.PlasmicLink>
                  ) : null}
                  {true ? (
                    <p.PlasmicLink
                      className={classNames(
                        projectcss.all,
                        projectcss.a,
                        projectcss.__wab_text,
                        sty.link__h1LdB
                      )}
                      component={Link}
                      href={"/" as const}
                      platform={"nextjs"}
                    >
                      {"About"}
                    </p.PlasmicLink>
                  ) : null}
                  {true ? (
                    <p.PlasmicLink
                      className={classNames(
                        projectcss.all,
                        projectcss.a,
                        projectcss.__wab_text,
                        sty.link__oQwgV
                      )}
                      component={Link}
                      href={"/" as const}
                      platform={"nextjs"}
                    >
                      {"Contact"}
                    </p.PlasmicLink>
                  ) : null}
                </React.Fragment>
              }
              openButton={
                <p.PlasmicImg
                  alt={""}
                  className={classNames(sty.img__rNmX1)}
                  displayHeight={"auto" as const}
                  displayMaxHeight={"none" as const}
                  displayMaxWidth={"none" as const}
                  displayMinHeight={"0" as const}
                  displayMinWidth={"0" as const}
                  displayWidth={"auto" as const}
                  src={"https://static1.plasmic.app/menu.svg" as const}
                />
              }
              responsiveBreakpoint={768 as const}
            />
          </div>

          <p.Stack
            as={"section"}
            data-plasmic-name={"hero"}
            data-plasmic-override={overrides.hero}
            hasGap={true}
            className={classNames(projectcss.all, sty.hero)}
          >
            <h2
              data-plasmic-name={"h2"}
              data-plasmic-override={overrides.h2}
              className={classNames(
                projectcss.all,
                projectcss.h2,
                projectcss.__wab_text,
                sty.h2
              )}
            >
              {"Decentralize Your Trading on Coinjoss"}
            </h2>

            <h5
              data-plasmic-name={"h5"}
              data-plasmic-override={overrides.h5}
              className={classNames(
                projectcss.all,
                projectcss.h5,
                projectcss.__wab_text,
                sty.h5
              )}
            >
              {
                "Join the Revolution of Secure and Transparent Token Exchange on Coinjoss.com"
              }
            </h5>

            <p.PlasmicLink
              className={classNames(
                projectcss.all,
                projectcss.a,
                sty.link__htPcl
              )}
              component={Link}
              href={"https://dex.coinjoss.com/swaps" as const}
              platform={"nextjs"}
            >
              <Button
                data-plasmic-name={"button"}
                data-plasmic-override={overrides.button}
                className={classNames("__wab_instance", sty.button)}
                color={"white" as const}
              >
                {"Trade Now"}
              </Button>
            </p.PlasmicLink>
          </p.Stack>

          <div
            data-plasmic-name={"feature"}
            data-plasmic-override={overrides.feature}
            className={classNames(projectcss.all, sty.feature)}
          >
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__ccKuq)}
            >
              <div className={classNames(projectcss.all, sty.freeBox___38QAb)}>
                <div className={classNames(projectcss.all, sty.columns__n1V7P)}>
                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.column___7LdXv)}
                  >
                    <Icon2Icon
                      className={classNames(projectcss.all, sty.svg__kwTu9)}
                      role={"img"}
                    />

                    <h4
                      className={classNames(
                        projectcss.all,
                        projectcss.h4,
                        projectcss.__wab_text,
                        sty.h4___9Lg6L
                      )}
                    >
                      {"Swap"}
                    </h4>

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__zmJ2F
                      )}
                    >
                      {
                        "Swap instantly and securely. Decentralized, transparent, and tamper-proof trading"
                      }
                    </div>
                  </p.Stack>

                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.column__i8WHs)}
                  >
                    <MoneyRocketSvgrepoComsvgIcon
                      className={classNames(projectcss.all, sty.svg__owPpv)}
                      role={"img"}
                    />

                    <h4
                      className={classNames(
                        projectcss.all,
                        projectcss.h4,
                        projectcss.__wab_text,
                        sty.h4__t1R
                      )}
                    >
                      {"Earn"}
                    </h4>

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__wUcfk
                      )}
                    >
                      {
                        "Boost your earning potential white Stake your coins and earn rewards on our DEX platform. "
                      }
                    </div>
                  </p.Stack>

                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.column__nerkR)}
                  >
                    <SwarmSessionSvgrepoComsvgIcon
                      className={classNames(projectcss.all, sty.svg__tfFi)}
                      role={"img"}
                    />

                    <h4
                      className={classNames(
                        projectcss.all,
                        projectcss.h4,
                        projectcss.__wab_text,
                        sty.h4__gWEs
                      )}
                    >
                      {"Collaborate"}
                    </h4>

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__vx0Fe
                      )}
                    >
                      {
                        "Collaborate and contribute to the future of decentralized finance. "
                      }
                    </div>
                  </p.Stack>
                </div>
              </div>
            </p.Stack>
          </div>

          <div
            data-plasmic-name={"feature2"}
            data-plasmic-override={overrides.feature2}
            className={classNames(projectcss.all, sty.feature2)}
          >
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__nuUyK)}
            >
              <div className={classNames(projectcss.all, sty.columns__eHEiY)}>
                <div className={classNames(projectcss.all, sty.column__z5BDn)}>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__nWhO
                    )}
                  >
                    {
                      "Powered by blockchain technology enables direct transactions between users, without relying on a centralized authority. Maintain full control over your funds"
                    }
                  </div>
                </div>

                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.column__c288A)}
                >
                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.columns__cSrha)}
                  >
                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.column__x6HmG)}
                    >
                      <SecureSvgrepoComsvgIcon
                        className={classNames(projectcss.all, sty.svg___0Ve3U)}
                        role={"img"}
                      />

                      <h4
                        className={classNames(
                          projectcss.all,
                          projectcss.h4,
                          projectcss.__wab_text,
                          sty.h4__jzWZo
                        )}
                      >
                        {"Secure"}
                      </h4>

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___1Wu9T
                        )}
                      >
                        {"Full control over your funds and private keys"}
                      </div>
                    </p.Stack>

                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.column__wpktm)}
                    >
                      <BlockchainSvgrepoComsvgIcon
                        className={classNames(projectcss.all, sty.svg__kyoO)}
                        role={"img"}
                      />

                      <h4
                        className={classNames(
                          projectcss.all,
                          projectcss.h4,
                          projectcss.__wab_text,
                          sty.h4__fl8X7
                        )}
                      >
                        {"Decentralize"}
                      </h4>

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__ozo0F
                        )}
                      >
                        {
                          "Processed by the network, more secure and transparent."
                        }
                      </div>
                    </p.Stack>
                  </p.Stack>

                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.columns__v6PMr)}
                  >
                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.column__rrgx8)}
                    >
                      <AnonymousSvgrepoComsvgIcon
                        className={classNames(projectcss.all, sty.svg__pui5H)}
                        role={"img"}
                      />

                      <h4
                        className={classNames(
                          projectcss.all,
                          projectcss.h4,
                          projectcss.__wab_text,
                          sty.h4__t0Xav
                        )}
                      >
                        {"Anonymous"}
                      </h4>

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___5H7Ew
                        )}
                      >
                        {"keep your identity  private and protected"}
                      </div>
                    </p.Stack>

                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.column__bQav0)}
                    >
                      <MultiLevelMarketingSvgrepoComsvgIcon
                        className={classNames(projectcss.all, sty.svg__wvW3)}
                        role={"img"}
                      />

                      <h4
                        className={classNames(
                          projectcss.all,
                          projectcss.h4,
                          projectcss.__wab_text,
                          sty.h4__smDbg
                        )}
                      >
                        {"Agnostic"}
                      </h4>

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__eIf0X
                        )}
                      >
                        {
                          "supports multiple blockchain networks, enabling diverse trading"
                        }
                      </div>
                    </p.Stack>
                  </p.Stack>
                </p.Stack>
              </div>
            </p.Stack>
          </div>

          <div
            data-plasmic-name={"feature3"}
            data-plasmic-override={overrides.feature3}
            className={classNames(projectcss.all, sty.feature3)}
          >
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__fvt6Z)}
            >
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__rduE)}
              >
                <h4
                  className={classNames(
                    projectcss.all,
                    projectcss.h4,
                    projectcss.__wab_text,
                    sty.h4__gizcF
                  )}
                >
                  {"Stay Tuned!"}
                </h4>

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___50O41
                  )}
                >
                  {
                    "Our team is constantly working to bring you the best experience in the DeFi World"
                  }
                </div>
              </p.Stack>
            </p.Stack>
          </div>

          <div
            data-plasmic-name={"feature4"}
            data-plasmic-override={overrides.feature4}
            className={classNames(projectcss.all, sty.feature4)}
          >
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__g8JyH)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__veWii
                )}
              >
                {"© 2023 · Coinjoss.com"}
              </div>
            </p.Stack>
          </div>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "header",
    "navigationBar",
    "img",
    "hero",
    "h2",
    "h5",
    "button",
    "feature",
    "feature2",
    "feature3",
    "feature4"
  ],
  header: ["header", "navigationBar", "img"],
  navigationBar: ["navigationBar", "img"],
  img: ["img"],
  hero: ["hero", "h2", "h5", "button"],
  h2: ["h2"],
  h5: ["h5"],
  button: ["button"],
  feature: ["feature"],
  feature2: ["feature2"],
  feature3: ["feature3"],
  feature4: ["feature4"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  header: "div";
  navigationBar: typeof NavigationBar;
  img: typeof p.PlasmicImg;
  hero: "section";
  h2: "h2";
  h5: "h5";
  button: typeof Button;
  feature: "div";
  feature2: "div";
  feature3: "div";
  feature4: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHomepage__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHomepage__VariantsArgs;
    args?: PlasmicHomepage__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicHomepage__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicHomepage__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicHomepage__ArgProps,
          internalVariantPropNames: PlasmicHomepage__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicHomepage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHomepage";
  } else {
    func.displayName = `PlasmicHomepage.${nodeName}`;
  }
  return func;
}

export const PlasmicHomepage = Object.assign(
  // Top-level PlasmicHomepage renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    header: makeNodeComponent("header"),
    navigationBar: makeNodeComponent("navigationBar"),
    img: makeNodeComponent("img"),
    hero: makeNodeComponent("hero"),
    h2: makeNodeComponent("h2"),
    h5: makeNodeComponent("h5"),
    button: makeNodeComponent("button"),
    feature: makeNodeComponent("feature"),
    feature2: makeNodeComponent("feature2"),
    feature3: makeNodeComponent("feature3"),
    feature4: makeNodeComponent("feature4"),

    // Metadata about props expected for PlasmicHomepage
    internalVariantProps: PlasmicHomepage__VariantProps,
    internalArgProps: PlasmicHomepage__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicHomepage;
/* prettier-ignore-end */
